{"version":3,"sources":["logo.svg","components/Navigation.js","components/Masthead.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","class","id","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","Masthead","className","src","alt","App","props","changeTxext","setState","saySomething","changeback","state","myState","this","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,8HCqB5BC,G,mLAjBb,OACE,yBAAKC,MAAM,gEAAgEC,GAAG,WAC1E,yBAAKD,MAAM,aACP,uBAAGA,MAAM,iCAAiCE,KAAK,aAA/C,mBAA8E,4BAAQF,MAAM,oGAAoGG,KAAK,SAASC,cAAY,WAAWC,cAAY,oBAAoBC,gBAAc,mBAAmBC,gBAAc,QAAQC,aAAW,qBAAzP,QAAkR,uBAAGR,MAAM,iBACzW,yBAAKA,MAAM,2BAA2BC,GAAG,oBACrC,wBAAID,MAAM,sBACN,wBAAIA,MAAM,yBAAwB,uBAAGA,MAAM,uDAAuDE,KAAK,cAArE,cAClC,wBAAIF,MAAM,yBAAwB,uBAAGA,MAAM,uDAAuDE,KAAK,UAArE,UAClC,wBAAIF,MAAM,yBAAwB,uBAAGA,MAAM,uDAAuDE,KAAK,YAArE,oB,GAV7BO,cCmBVC,E,uKAjBb,OACC,4BAAQC,UAAU,8CACjB,yBAAKA,UAAU,mDACd,yBAAKA,UAAU,uBAAuBC,IAAI,2BAA2BC,IAAI,KACzE,wBAAIF,UAAU,wCAAd,mBACA,yBAAKA,UAAU,gCACd,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,uBAAsB,uBAAGA,UAAU,iBAClD,yBAAKA,UAAU,yBAEhB,uBAAGA,UAAU,8CAAb,qD,GAZkBF,aCkCRK,E,kDA7Bb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAORC,YAAc,WACZ,EAAKC,SAAS,CAAEC,aAAc,kBATd,EAWlBC,WAAa,WACX,EAAKF,SAAS,CAAEC,aAAc,iBAV9B,EAAKE,MAAQ,CACXC,QAAS,iBACTH,aAAc,eAJA,E,qDAgBhB,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,2BAAIW,KAAKF,MAAMC,SACf,2BAAIC,KAAKF,MAAMF,cACf,4BAAQK,QAASD,KAAKN,aAAtB,SACA,4BAAQO,QAASD,KAAKH,YAAtB,c,GAxBUK,IAAMf,WCMJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.edb6f3c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Navigation extends Component {\r\n render() {\r\n  return (\r\n    <nav class=\"navbar navbar-expand-lg bg-secondary text-uppercase fixed-top\" id=\"mainNav\">\r\n        <div class=\"container\">\r\n            <a class=\"navbar-brand js-scroll-trigger\" href=\"#page-top\">Start Bootstrap</a><button class=\"navbar-toggler navbar-toggler-right text-uppercase font-weight-bold bg-primary text-white rounded\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">Menu <i class=\"fas fa-bars\"></i></button>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n                <ul class=\"navbar-nav ml-auto\">\r\n                    <li class=\"nav-item mx-0 mx-lg-1\"><a class=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\" href=\"#portfolio\">Portfolio</a></li>\r\n                    <li class=\"nav-item mx-0 mx-lg-1\"><a class=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\" href=\"#about\">About</a></li>\r\n                    <li class=\"nav-item mx-0 mx-lg-1\"><a class=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\" href=\"#contact\">Contact</a></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n  );\r\n }\r\n}\r\n\r\nexport default Navigation;","import React, { Component } from 'react';\r\n\r\nclass Masthead extends Component {\r\n render() {\r\n  return (\r\n   <header className=\"masthead bg-primary text-white text-center\">\r\n    <div className=\"container d-flex align-items-center flex-column\">\r\n     <img className=\"masthead-avatar mb-5\" src=\"assets/img/avataaars.svg\" alt=\"\" />\r\n     <h1 className=\"masthead-heading text-uppercase mb-0\">Start Bootstrap</h1>\r\n     <div className=\"divider-custom divider-light\">\r\n      <div className=\"divider-custom-line\"></div>\r\n      <div className=\"divider-custom-icon\"><i className=\"fas fa-star\"></i></div>\r\n      <div className=\"divider-custom-line\"></div>\r\n     </div>\r\n     <p className=\"masthead-subheading font-weight-light mb-0\">Graphic Artist - Web Designer - Illustrator</p>\r\n    </div>\r\n   </header>\r\n  );\r\n }\r\n}\r\n\r\nexport default Masthead;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Navigation from './components/Navigation'\r\nimport Masthead from './components/Masthead'\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      myState: 'My first state',\r\n      saySomething: 'Hello World'\r\n    }\r\n  }\r\n\r\n  changeTxext = () => {\r\n    this.setState({ saySomething: 'How are you?' })\r\n  }\r\n  changeback = () => {\r\n    this.setState({ saySomething: 'hello World' })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navigation/>\r\n        <Masthead/>\r\n        <p>{this.state.myState}</p>\r\n        <p>{this.state.saySomething}</p>\r\n        <button onClick={this.changeTxext}>Click</button>\r\n        <button onClick={this.changeback}>Click</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}